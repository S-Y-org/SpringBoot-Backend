package net.javaguides.springbootbackend.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends  RuntimeException{

    public ResourceNotFoundException(String message) {
        super(message);
    }
}


//NOTES
/*
The @ResponseStatus annotation is used in Spring MVC to declare the HTTP status code to be returned by a controller method or an exception handler method. It allows you to customize the HTTP response status based on the outcome of the method execution or the encountered exception.

Here's how the @ResponseStatus annotation can be used:

Using @ResponseStatus on a Controller Method:
You can apply the @ResponseStatus annotation directly on a controller method to specify the HTTP status code that should be returned when the method is successfully executed. For example:


@GetMapping("/users/{id}")
@ResponseStatus(HttpStatus.OK)
public User getUserById(@PathVariable Long id) {
    // Retrieve user from the database
    // ...
    return user;
}



In this example, when the GET request is made to /users/{id} endpoint and the getUserById() method is successfully executed, the HTTP response will have a status code of 200 OK.

Using @ResponseStatus on an Exception Handler Method:
You can also use the @ResponseStatus annotation on exception handler methods to specify the HTTP status code to be returned when a specific exception is encountered. For example:


@ResponseStatus(HttpStatus.NOT_FOUND)
@ExceptionHandler(UserNotFoundException.class)
public void handleUserNotFoundException() {
    // Handle the exception
    // ...
}


In this example, when a UserNotFoundException is thrown during the execution of any controller method, the handleUserNotFoundException() method will be invoked, and the HTTP response will have a status code of 404 NOT FOUND.

By using the @ResponseStatus annotation, you can control the HTTP response status codes returned by your controller methods or exception handler methods. It allows you to provide meaningful status codes that align with the semantics of your application or RESTful APIs.


===================================================
(Q)In the above code cant we add @NoArgsConstructor, @AllArgsConstructor  instead of hard coding the constructor

es, you can use the @NoArgsConstructor and @AllArgsConstructor annotations in the ResourceNotFoundException class to generate the constructors instead of manually coding them.

Here's an example of how you can modify the code using Lombok annotations:



import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

@ResponseStatus
@NoArgsConstructor
@AllArgsConstructor
public class ResourceNotFoundException extends RuntimeException {

    private String message;

    // Getter and Setter (generated by Lombok)

}


In this example, the @NoArgsConstructor annotation generates a no-argument constructor, and the @AllArgsConstructor annotation generates a constructor with a parameter for the message field. The Lombok annotations eliminate the need to manually write constructors, reducing boilerplate code.

Note that with Lombok, you don't need to explicitly call super(message) in the constructor. Lombok takes care of initializing the superclass with the provided argument.

By using Lombok annotations, you can simplify your code and let Lombok generate the necessary constructors for your class automatically.




 */