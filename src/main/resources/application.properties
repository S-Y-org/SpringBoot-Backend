spring.datasource.url = jdbc:mysql://localhost:3306/ems?useSSL=false
spring.datasource.username=root
spring.datasource.password=root

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect // This one causing errors. Not Requirement.
spring.jpa.hibernate.ddl-auto=update





#NOTES:
#(Q)tell me the difference between these two ;
#spring.datasource.url = jdbc:mysql://localhost:3306/ems?createDatabaseIfNotExist=true
#spring.datasource.url = jdbc:mysql://localhost:3306/ems?useSSL=false

#The two configurations you provided are related to the URL used to connect to a MySQL database in a Spring application. Let's break down the differences between them:
#
#spring.datasource.url = jdbc:mysql://localhost:3306/ems?createDatabaseIfNotExist=true
#In this configuration, the URL includes an additional parameter createDatabaseIfNotExist=true. This parameter tells MySQL to create the database with the name "ems" if it doesn't already exist. It is a useful option when you want to automatically create the database during application startup if it's not present.
#
#spring.datasource.url = jdbc:mysql://localhost:3306/ems?useSSL=false
#In this configuration, the URL includes the parameter useSSL=false. This parameter disables the use of SSL (Secure Sockets Layer) for the database connection. SSL is a protocol used to secure data transmission between the application and the database server. By setting useSSL to false, you are indicating that you don't want to use SSL encryption for the database connection. This can be appropriate in development or local environments where SSL encryption is not necessary.
#
#To summarize, the first configuration includes the createDatabaseIfNotExist=true parameter, which tells MySQL to create the database if it doesn't exist. The second configuration includes the useSSL=false parameter, which disables SSL encryption for the database connection.

#-----------------------------------

#The two configurations below are related to the Hibernate settings in a Spring application. Let's discuss each of them:
#
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQLInnoDBDialect
#This configuration sets the Hibernate dialect for MySQL to org.hibernate.dialect.MySQLInnoDBDialect. The dialect determines how Hibernate generates SQL statements specific to the database being used. In this case, the MySQLInnoDBDialect is configured, which is suitable for working with MySQL databases using the InnoDB storage engine. The dialect provides compatibility and optimization for MySQL-specific features and syntax.
#
#spring.jpa.hibernate.ddl-auto=update
#This configuration specifies the behavior of Hibernate's schema generation or update strategy. The ddl-auto property controls how Hibernate handles the database schema creation, modification, or validation during application startup. In this case, the value update is set, which means that Hibernate will automatically update the schema based on the entity mappings. If the schema doesn't exist, it will be created. If the schema already exists, Hibernate will compare the entity mappings with the schema and apply any necessary changes or updates.
#
#It's important to note that the ddl-auto property should be used with caution, especially in production environments, as it can modify the database schema automatically. It is typically recommended to use more controlled approaches, such as manual schema management or database migration tools, for production deployments.
#
#These two configurations work together to define the MySQL dialect for Hibernate and control the schema generation or update behavior. They are commonly used in Spring applications to interact with a MySQL database using Hibernate as the ORM (Object-Relational Mapping) framework.